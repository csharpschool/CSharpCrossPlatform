@page "/"
@using BlackJack.Structs;

<PageTitle>Blackjack</PageTitle>

<h1>Blackjack</h1>

@*
    @foreach(var card in unicodeCards)
    {
        <span style='font-size:50px;'>@card</span>
    }
*@

@* Cards *@
@*
    @foreach(var card in deck)
    {
        <span class="display-3">@card.Symbol</span>
    }
*@

@* Dealer *@
<div class="text-danger display-3">Dealer</div>
@foreach(var card in dealerCards)
{
    <span class="text-danger display-3">@card.Symbol</span>
}
<span class="text-danger display-3">&nbsp;@dealerScore</span>

@* Player *@
<div class="text-success display-3 mt-4">Player</div>
@foreach(var card in playerCards)
{
    <span class="text-success display-3">@card.Symbol</span>
}
<span class="text-success display-3">&nbsp;@playerScore</span>
<div class="mt-4">
    @if(!stay)
    {
        <button class="btn btn-success" @onclick="(() => DealCard(ref playerCards, PlayerTypes.Player))">Draw Card</button>
        <button class="btn btn-danger" @onclick="Stay">Stay</button>
    }
    else
    {
        <button class="btn btn-primary" @onclick="NewGame">New Game</button>
    }
</div>

@* Winner *@
<br />
<div class="text-primary display-1">@winner</div>

@code
{
    string[] unicodeCards = { "🂡", "🂢", "🂣", "🂤", "🂥", "🂦", "🂧", "🂨", "🂩", "🂪", "🂫", "🂭", "🂮" };
    const int numberOfCards = 52;
    bool stay;
    Card[] deck = new Card[numberOfCards];
    Card[] playerCards = new Card[0];
    Card[] dealerCards = new Card[0];
    int playerScore = 0, dealerScore = 0;
    string winner = string.Empty;

    enum PlayerTypes
    {
        Dealer,
        Player
    }

    enum Results
    {
        Unknown,
        BlackJack,
        PlayerLost,
        DealerLost
    }
    Results result = Results.Unknown;
    
    void NewGame()
    {
        playerCards = new Card[0];
        dealerCards = new Card[0];
        playerScore = 0;
        dealerScore = 0;
        stay = false;
        winner = string.Empty;
        result = Results.Unknown;
        var cards = CreateDeck();
        deck = ShuffleDeck(cards);
        DealCard(ref dealerCards, PlayerTypes.Dealer, 2);
        DealCard(ref playerCards, PlayerTypes.Player, 2);
    }

    Card[] CreateDeck()
    {
        var cards = new Card[numberOfCards];
        var index = 0;
        for(int i = 0; i < 4; i++)
            for(int j = 0; j < unicodeCards.Length; j++)
            {
                var value = j > 9 ? 10 : j + 1;
                cards[index] = new Card(unicodeCards[j], value);
                index++;
            }

        return cards;
    }

    Card[] ShuffleDeck(Card[] cards)
    {
        var shuffled = new Card[numberOfCards];
        var random = new Random();
        var position = 0;
        while(position < numberOfCards)
        {
            var index = random.Next(cards.Where(c => !c.IsRemoved).Count());
            shuffled[position++] = cards[index];
            cards[index].IsRemoved = true;
        }
        return shuffled;
    }

    void DealCard(ref Card[] cards, PlayerTypes playerType, int takeCards = 1)
    {
        cards = cards.Concat(deck[0..takeCards]).ToArray();
        deck = deck[takeCards..];

        if(playerType.Equals(PlayerTypes.Player))
        {
            CalculateScore(cards, out playerScore);
            if(playerScore == 21 && cards.Count().Equals(2))
            {
                result = Results.BlackJack;
                Stay();
            }
            if (playerScore > 21)
            {
                result = Results.PlayerLost;
                Stay();
            }
        }
        else
        {
            if (!stay) cards[0].IsHidden = true;
            CalculateScore(cards, out dealerScore);
            if (dealerScore > 21) result = Results.DealerLost;
        }
    }

    void Stay()
    {
        stay = true;
        dealerCards[0].IsHidden = false;
        if(!result.Equals(Results.BlackJack) && !result.Equals(Results.PlayerLost)) DrawDealerCards();
        DetermineWinner(result);
    }

    void CalculateScore(Card[] cards, out int score)
    {
        score = cards.Sum(c => c.Value);
        var aces = cards.Where(c => c.Value.Equals(1) && !c.IsHidden); // Fetch all aces

        // The score is low enough to add the ace with its high value of 11.
        // Because 1 has already been added with the Sum function, only 10 is added.
        foreach(var ace in aces)
            if (score <= 11) score += 10;
    }

    void DrawDealerCards()
    {
        while(dealerScore < 17)
            DealCard(ref dealerCards, PlayerTypes.Dealer);
    }

    void DetermineWinner(Results result)
    {
        if(result.Equals(Results.BlackJack) || result.Equals(Results.PlayerLost))
        {
            dealerCards[0].IsHidden = true;
            dealerScore = dealerCards[1].Value;
        }

        if (result.Equals(Results.BlackJack)) winner = "Player wins with Blackjack";
        else if(result.Equals(Results.PlayerLost)) winner = "Dealer wins";
        else if(result.Equals(Results.DealerLost)) winner = "Player wins";
        else if(playerScore > dealerScore) winner = "Player wins";
        else if(playerScore < dealerScore) winner = "Dealer wins";
        else winner = "Draw";
    }

    protected override void OnInitialized() => NewGame();
    
}